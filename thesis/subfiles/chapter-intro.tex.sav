% !Mode:: "TeX:UTF-8"
\chapter{绪论}

% \emph{TODO: 调整格式、补全引用}

\section{课题研究背景}

% -------------------------------
\subsection{多核分区系统}
在航空电子等方面，传统的联合式结构中，每个单独的计算机系统只负责某一项具体的应用功能，所有功能模块通过特定的总线接口与相关协议有机的联系起来，控制整机的正常运行。这种结构的好处是他们内在的错误具有隔离性，即一般一个功能模块的失效并不会影响其他功能的正常运行。但同时其缺点是每个功能都需要自己独占的计算机，系统中处理器的数量会随着系统功能的丰富而增加，造成整个系统在空间、电力、重量、冷却、安装、维护等方面的重复负担，增加了维护成本、限制了系统规模。

为了提高系统的集成度，增加计算机资源的利用率，人们提出了系统综合化的要求。在综合化的系统中，一个计算机系统能够为多个应用提供计算资源，从而提高系统的利用效率。但综合化系统会破坏原来硬件的天然隔离，增加错误传播的几率。为了解决这个问题，分区系统被提了出来。使用分区机制可以为运行在系统中的不同应用建立独立分区，在时间和空间两个维度提供资源，使应用之间相互隔离，保持联合式结构中的优点。

% 可以添加 综述 里关于多核发展的描述 \cite{SurveyHRT}
另一方面，随着集成电路工艺的发展遇到瓶颈，计算机运算能力的提高，已经从提升主频来提高单个处理器计算能力的传统方法发展到了通过多核、众核架构来更好的并行处理任务的道路上来。主要处理器芯片商也纷纷推出多核产品，目前已在通用领域得到广泛应用。因此，分区系统向多核处理器平台发展也将成为不可避免的趋势。

\subsection{实时调度算法}


目前，关于多核实时系统的调度算法研究，多集中于任务的时间约束，以及提高处理器的利用率等方面\upcite{SurveyHRT}。多核的并行任务分配大部分是NP完全问题\upcite{SchOSRT}，这给算法设计带来了进一步的挑战。此外，多核实时调度算法针对任务间数据流通、协作而产生的偏序依赖关系的情况还缺少成熟的结论。

随着系统规模的扩大，实时任务间的关系也日趋复杂。如文章\cite{Without}中提到的情况，在构建一个关键的嵌入式控制系统时，系统中的控制循环包括传感器、控制算法和调节系统状态的传动部件等。这类系统的构建通常需要多人团队并行的分工合作，分别开发系统中的不同部分，之后再将这些部分（或者称作任务）组合成一个系统。这类集合工作经常需要人工在离线情况下对任务排序，来保证任务的执行是可预测、可确定的。但在目前成熟可靠的嵌入式系统中，如用于汽车工业的 OSEK\upcite{OSEK}系统、面向宇航的 RTEMS\upcite{RTEMS}系统、以及遵循 ARINC 653 标准\upcite{ARINC653} 标准的航电系统（如 VxWorks 653\upcite{VxWorksRTCA}）等，对带有数据依赖的任务并没有提供直接支持。这意味着任务间通信的确定性通常需要手工先对任务部分排序，然后再交由操作系统调度，而这个过程是冗繁的。

%\section{课题来源与意义} %=========================================

\section{论文研究目标与内容}


结合以上几方面的发展趋势及现状，本文以多核分区系统平台的任务为模型，提出一种面向通信的调度算法，综合考虑任务的周期性时间约束和任务间由于数据通信所产生的数据依赖约束，产生满足以上约束条件的静态调度。

本文针对多核分区的实时系统，研究它的调度算法。主要研究目标包括：
\begin{enumerate}
\item	结合现有各类多核或实时调度算法，分析研究多核分区实时系统在调度中的难点问题，如解决周期任务间的依赖关系、保证实时任务的时间限制、考虑不同处理单元间的通信开销对调度结果的影响等。
\item	实现一种多核分区实时调度算法，在给定一个周期性任务集和他们的时间限制，并给出任务间的数据依赖关系的情况下，在目标多核分区处理器平台寻找满足以上约束条件的静态调度。如果有的话给出考虑核间通信开销、延迟下的一种可行调度方案。
\item	验证算法的正确性，分析算法的时空复杂度，并结合例子分析算法对通信约束的处理。
\end{enumerate}


本论文的主要研究内容有以下几个方面：
\begin{enumerate}
\item	调研多核系统现有的并行调度算法及其优势和局限性。
\item	设计调度算法，以满足对多核分区系统中有依赖关系的实时任务的有效调度。主要考虑以下问题：
  \begin{itemize}
    \item	任务的实时性要求。如周期性、时间限等。
    \item	任务的数据依赖关系约束。如任务C的执行需要任务A 和B 的输出结果时，不能使C 先于任务A和B执行。
    \item	核间的通信开销。当A向其他核上执行的任务B发送数据时，B要在数据到达后才能开始执行；如果A 和B 在同一处理器时不存在此延迟，或延迟可忽略。
    %\item	在给定的多核架构上充分发掘任务间的并行性，以使调度结果尽量接近最优。
  \end{itemize}
\item	从理论上证明算法对实时任务在时间上的保证。
\item	构建调度算法模拟程序，并验证调度的任务满足时间与数据约束。%并实测算法的运行效率和调度结果的优劣。
\end{enumerate}

\section{国内外研究现状}

%介绍实时任务的两方面：传统周期性约束 以及 DSP 中的数据约束
实时任务指的是这样一类任务，它的正确性不仅要求任务运行结果正确，还要求任务必须在一定的时间限内运行结束。从周期性和偶发任务模型来说，实时任务包括周期性任务、偶发性任务和非周期任务，它的特征是任务均以时间驱动；DSP 系统中的数据流程序则属于另一类的实时任务，它们以数据驱动为特征。

%分两段分别介绍时间约束的实时系统，如 VxWorks 等 和 DSP 中的数据约束 各自的处理方法
周期性和偶发任务模型是大多数传统的实时操作系统所支持的任务模型。其中周期性任务是指
在绝大多数发表的研究中，都假定任务间是相互独立的，因此不会因处理器以外的资源争用造成阻塞\upcite{SurveyHRT}。


% 再一段介绍有些方法企图将两者结合起来，如。。。等


% 中期检查
大部分多核的实时任务调度问题都是NP完全的，因此一些启发式算法被提了出来，如Thakor,D. 和Shah,A.提出的D\_EDF 算法\upcite{DEDF}，Zhu Xiangbin 和 Tu Shiliang 提出的基于 myopic 算法的启发式算法\upcite{Zhu2003} 等。但这些算法未能考虑任务间依赖关系的问题。

由于DSP系统对大数据量吞吐率的要求，多采用静态调度，这点与实时系统较为类似。它的并行调度算法也较好的解决了任务间的数据传输、依赖关系等问题。如EDWARD ASHFORD LEE 等人提出的SDF 方法\upcite{SDF1987,SDF_C} 等。但由于DSP 系统是数据驱动型的，这点从本质上与时间驱动型的实时系统有所不同，DSP 中的一些调度算法并不能直接用来解决带有时间属性的实时任务调度问题。在解决时间约束方面Margarete Sackmann等人提出的一个考虑时间和能耗约束的快速启发式算法\upcite{FastHeu} 在解决单个任务的时间限制约束上有一定进展，但仅将时间限制作为调度的参考，没有给出理论上的严格保证，也未考虑任务的周期性约束条件等。

在分布式计算方面，多处理器的并行调度也有较多研究，由于运算环境的复杂性，它对各处理器间的通信效率、时延等有较多考虑，如文章\cite{DLS} 提出的Mapping Heuristic 算法，文章\cite{Leinberger2000,Yu1991} 提出的DLS 算法等，考虑数据通信的路由表问题。但同样这些算法也缺少对实时性任务的支持，并不能从理论上保证任务的时间需求。

%======================== 英文小论文翻译一下

%\emph{TODO: 调整格式、添加引用}

%without 的方法缺陷为何 缩减 deadline 使得任务分布空间变小，造成无法调度






\section{论文研究成果}
%直接照搬 abstract，待修改

针对多核实时系统上的任务调度问题，本文提出一种面向通信的静态调度 (Communication-Oriented Static Scheduling, COSS) 算法。该算法能够在考虑任务间数据通信和周期任务时间限的情况下，在运行前将任务静态调度到多核处理器平台上，同时保持任务之间的通信关系和时间限制得到满足。在有效调度能够被找到的情况下，算法将会给出各个核上的调度序列，以及核之间链路上的消息调度序列。

\section{本文的组织}

本文其余部分组织如下：

第二章首先简要介绍目前主要调度算法的分类、各自的特点，以及本论文所采用相关算法的考虑因素，然后对本算法的总体流程给出说明，最后分别介绍本算法主要基于的两个相关算法。

% 直接说三四两章详细介绍算法设计，不用这么具体写每章是什么
第三章介绍算法第一步的核心点，即加入时间和数据约束的SDF图的构造方法，并给出对时间和数据优先关系给予保证的证明。最后可以按照\cite{SDF1987}所述的方法进行算法的第二步并得到包含虚拟任务结点的大周期DAG。

第四章着重于算法的第三步，提出改进的DLS算法，针对DAG中的虚拟结点进行特殊处理并得到最终的静态调度表。在其中需要解决任务之间的消息路由，并考虑任务和消息分别在处理器和链路上的时间、空间分配。

第五章对算法的实现程序给出详细解释，包括输入模块、中间SDF 图和DAG 的存储结构和调度表的中几个有助于提高效率的细节。
